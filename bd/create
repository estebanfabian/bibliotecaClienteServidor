# ---------------------------------------------------------------------- #
# Script generated with: DeZign for Databases V8.1.2                     #
# Target DBMS:           MySQL 5                                         #
# Project file:          v1.dez                                          #
# Project name:                                                          #
# Author:                                                                #
# Script type:           Database creation script                        #
# Created on:            2019-08-10 01:53                                #
# ---------------------------------------------------------------------- #


# ---------------------------------------------------------------------- #
# Add tables                                                             #
# ---------------------------------------------------------------------- #

# ---------------------------------------------------------------------- #
# Add table "tbl_usuario"                                                #
# ---------------------------------------------------------------------- #

CREATE TABLE `tbl_usuario` (
    `id` INTEGER(11) NOT NULL AUTO_INCREMENT,
    `codigo` INTEGER(11) NOT NULL,
    `cedula` VARCHAR(11) CHARACTER SET utf8mb4 NOT NULL,
    `nombre` VARCHAR(40) CHARACTER SET utf8mb4 NOT NULL,
    `apellido` VARCHAR(40) CHARACTER SET utf8mb4 NOT NULL,
    `fechaNacimiento` DATE NOT NULL,
    `sexo` TINYINT(4) NOT NULL COMMENT '0 mujer , 1 hombre',
    `direccion` VARCHAR(40) CHARACTER SET utf8mb4 NOT NULL,
    `direccion2` VARCHAR(40) CHARACTER SET utf8mb4,
    `telefonoPrincipal` VARCHAR(40) CHARACTER SET utf8mb4 NOT NULL DEFAULT '0',
    `telefonoSecundario` VARCHAR(40) CHARACTER SET utf8mb4 DEFAULT '0',
    `telefonoOtro` VARCHAR(40) CHARACTER SET utf8mb4,
    `emailPrincipal` VARCHAR(40) CHARACTER SET utf8mb4 NOT NULL,
    `contactoNombre` VARCHAR(40) CHARACTER SET utf8mb4,
    `contactoApellido` VARCHAR(40) CHARACTER SET utf8mb4,
    `contactoDireccion` VARCHAR(40) CHARACTER SET utf8mb4,
    `contactoDireccion2` VARCHAR(40) CHARACTER SET utf8mb4,
    `contactoTelefono` VARCHAR(40) CHARACTER SET utf8mb4 DEFAULT '0',
    `contrasena` VARCHAR(40) CHARACTER SET utf8mb4 NOT NULL,
    `multa` INTEGER(11) DEFAULT 0,
    `perfil` VARCHAR(13) CHARACTER SET utf8mb4 DEFAULT 'estudiante' COMMENT 'Los perfiles que se manejara administrador, estudiates y trabajador',
    `intentos` INTEGER(11) DEFAULT 0,
    `ultimo_intento` DATETIME,
    PRIMARY KEY (`id`)
)
ENGINE = INNODB;

# ---------------------------------------------------------------------- #
# Add table "tbl_autor"                                                  #
# ---------------------------------------------------------------------- #

CREATE TABLE `tbl_autor` (
    `idAutor` INTEGER(11) NOT NULL AUTO_INCREMENT,
    `nombreAutor` VARCHAR(40) CHARACTER SET utf8mb4 DEFAULT 'anonimo',
    `notaAutor` TEXT CHARACTER SET utf8mb4,
    PRIMARY KEY (`idAutor`)
)
ENGINE = INNODB;

# ---------------------------------------------------------------------- #
# Add table "tbl_editorial"                                              #
# ---------------------------------------------------------------------- #

CREATE TABLE `tbl_editorial` (
    `idEditorial` INTEGER(11) NOT NULL AUTO_INCREMENT,
    `nombreEditorial` VARCHAR(40) CHARACTER SET utf8mb4,
    `direccionEditorial` VARCHAR(40) CHARACTER SET utf8mb4,
    `telefonoEditorial` VARCHAR(40) CHARACTER SET utf8mb4,
    `anoPublicacion` DATETIME,
    PRIMARY KEY (`idEditorial`)
)
ENGINE = INNODB;

# ---------------------------------------------------------------------- #
# Add table "tbl_video_beam"                                             #
# ---------------------------------------------------------------------- #

CREATE TABLE `tbl_video_beam` (
    `idVideoBeam` INTEGER(11) NOT NULL,
    `fabricante` VARCHAR(40) CHARACTER SET utf8mb4 NOT NULL,
    `cableUSB` TINYINT(4) NOT NULL COMMENT 'este campo es para saber si el video bem tiene clase USB',
    `cableHDMI` TINYINT(4) NOT NULL COMMENT 'este campo es para saber si el video bem tiene clase HDMI',
    `cableVGA` TINYINT(4) NOT NULL COMMENT 'este campo es para saber si el video bem tiene clase VGA',
    `observaciones` TEXT CHARACTER SET utf8mb4,
    `estadoVideoBeam` VARCHAR(9) CHARACTER SET utf8mb4 DEFAULT 'libre' COMMENT 'Este campo indica el estado del video beam si es libre,reservado y prestado ',
    PRIMARY KEY (`idVideoBeam`)
)
ENGINE = INNODB;

# ---------------------------------------------------------------------- #
# Add table "tbl_computador"                                             #
# ---------------------------------------------------------------------- #

CREATE TABLE `tbl_computador` (
    `idcomputador` VARCHAR(40) CHARACTER SET utf8mb4 NOT NULL,
    `fabricante` VARCHAR(40) CHARACTER SET utf8mb4 NOT NULL,
    `observaciones` TEXT CHARACTER SET utf8mb4,
    `cargadorId` VARCHAR(40) CHARACTER SET utf8mb4,
    `estadoComputador` VARCHAR(9) CHARACTER SET utf8mb4 DEFAULT 'libre' COMMENT 'Este campo indica el estado del computador si es libre,reservado y prestado ',
    PRIMARY KEY (`idcomputador`)
)
ENGINE = INNODB;

# ---------------------------------------------------------------------- #
# Add table "tbl_biblioteca"                                             #
# ---------------------------------------------------------------------- #

CREATE TABLE `tbl_biblioteca` (
    `idBiblioteca` INTEGER(11) NOT NULL AUTO_INCREMENT,
    `nombreBiblioteca` VARCHAR(40) CHARACTER SET utf8mb4,
    `direccionBiblioteca` VARCHAR(40) CHARACTER SET utf8mb4,
    `telefonoBiblioteca` VARCHAR(40) CHARACTER SET utf8mb4,
    `personaResponsabe` VARCHAR(40) CHARACTER SET utf8mb4,
    `obervacionBiblioteca` TEXT CHARACTER SET utf8mb4,
    PRIMARY KEY (`idBiblioteca`)
)
ENGINE = INNODB;

# ---------------------------------------------------------------------- #
# Add table "tbl_libro_prestamoint"                                      #
# ---------------------------------------------------------------------- #

CREATE TABLE `tbl_libro_prestamoint` (
    `isbnPrestamoInt` VARCHAR(40) CHARACTER SET utf8mb4 NOT NULL,
    `titulo` VARCHAR(40) CHARACTER SET utf8mb4,
    `editorial` VARCHAR(40) CHARACTER SET utf8mb4,
    `categoriaLibro` VARCHAR(40) CHARACTER SET utf8mb4,
    `resena` TEXT CHARACTER SET utf8mb4,
    `autor` VARCHAR(40) CHARACTER SET utf8mb4,
    PRIMARY KEY (`isbnPrestamoInt`)
)
ENGINE = INNODB;

# ---------------------------------------------------------------------- #
# Add table "tbl_temas"                                                  #
# ---------------------------------------------------------------------- #

CREATE TABLE `tbl_temas` (
    `idTema` INTEGER(11) NOT NULL AUTO_INCREMENT,
    `nombreTema` VARCHAR(40) CHARACTER SET utf8mb4,
    `descripcion` TEXT CHARACTER SET utf8mb4,
    PRIMARY KEY (`idTema`)
)
ENGINE = INNODB;

# ---------------------------------------------------------------------- #
# Add table "tbl_libro"                                                  #
# ---------------------------------------------------------------------- #

CREATE TABLE `tbl_libro` (
    `isbn` INTEGER(11) NOT NULL,
    `idEditorial` INTEGER(11),
    `titulo` VARCHAR(40) CHARACTER SET utf8mb4,
    `categoriaLibro` VARCHAR(40) CHARACTER SET utf8mb4 NOT NULL COMMENT 'Este campo indica si es de terror , misterio',
    `resena` TEXT CHARACTER SET utf8mb4,
    `estado` VARCHAR(9) CHARACTER SET utf8mb4 DEFAULT 'libre' COMMENT 'Este campo indica el estado del libro si es libre,reservado y prestado (estado reservado ser maximo 3 dias  sin contar domingo ni festivos )',
    `imagen` VARCHAR(200) CHARACTER SET utf8mb4,
    PRIMARY KEY (`isbn`)
)
ENGINE = INNODB;

CREATE INDEX `Editorial_Libro` ON `tbl_libro` (`idEditorial`);

# ---------------------------------------------------------------------- #
# Add table "tbl_prestamo"                                               #
# ---------------------------------------------------------------------- #

CREATE TABLE `tbl_prestamo` (
    `idPrestamo` INTEGER(11) NOT NULL AUTO_INCREMENT,
    `estadoLibro` VARCHAR(40) CHARACTER SET utf8mb4,
    `preInterBibliotecarios` VARCHAR(40) CHARACTER SET utf8mb4 COMMENT 'este campo indica si el libro fue de prestamo interbibliotecarios',
    `actividad` INTEGER(11) NOT NULL COMMENT '0 inactivo , 1 reservado , 2 prestamo',
    `diaReserva` DATETIME,
    `diaEntrega` DATETIME,
    `diaPrestamo` DATETIME,
    `renovacion` INTEGER(11) DEFAULT 0 COMMENT 'este campo se tiene para que los usuario solo pueda hacer una renovacion ',
    `codigo` INTEGER(11),
    `cod_empleado` INTEGER(11),
    `idVideoBeam` INTEGER(11),
    `idcomputador` VARCHAR(40) CHARACTER SET utf8mb4,
    `id` INTEGER(11),
    `isbn` INTEGER(11),
    PRIMARY KEY (`idPrestamo`)
)
ENGINE = INNODB;

CREATE INDEX `TBL_Video_Beam_TBL_Prestamo` ON `tbl_prestamo` (`idVideoBeam`);

CREATE INDEX `TBL_Computador_TBL_Prestamo` ON `tbl_prestamo` (`idcomputador`);

CREATE INDEX `tbl_usuario_tbl_prestamo` ON `tbl_prestamo` (`id`);

CREATE INDEX `tbl_libro_tbl_prestamo` ON `tbl_prestamo` (`isbn`);

# ---------------------------------------------------------------------- #
# Add table "tbl_libro_autor"                                            #
# ---------------------------------------------------------------------- #

CREATE TABLE `tbl_libro_autor` (
    `idAutorLibro` INTEGER(11) NOT NULL AUTO_INCREMENT,
    `listaLibro` VARCHAR(40) CHARACTER SET utf8mb4,
    `idAutor` INTEGER(11),
    `isbn` INTEGER(11),
    PRIMARY KEY (`idAutorLibro`)
)
ENGINE = INNODB;

CREATE INDEX `tbl_autor_tbl_libro_autor` ON `tbl_libro_autor` (`idAutor`);

CREATE INDEX `tbl_libro_tbl_libro_autor` ON `tbl_libro_autor` (`isbn`);

# ---------------------------------------------------------------------- #
# Add table "tbl_prestamo_interbibliotecario"                            #
# ---------------------------------------------------------------------- #

CREATE TABLE `tbl_prestamo_interbibliotecario` (
    `idPrestamoInterBiblio` INTEGER(11) NOT NULL AUTO_INCREMENT,
    `idPrestemoInterBibliotecario` INTEGER(11) NOT NULL,
    `isbnPrestamoInt` VARCHAR(40) CHARACTER SET utf8mb4,
    `idPrestamo` INTEGER(11),
    PRIMARY KEY (`idPrestamoInterBiblio`)
)
ENGINE = INNODB;

CREATE INDEX `tbl_biblioteca_tbl_prestamo_InterBibliotecario` ON `tbl_prestamo_interbibliotecario` (`idPrestemoInterBibliotecario`);

CREATE INDEX `tbl_libro_prestamoint_tbl_prestamo_InterBibliotecario` ON `tbl_prestamo_interbibliotecario` (`isbnPrestamoInt`);

CREATE INDEX `tbl_prestamo_tbl_prestamo_InterBibliotecario` ON `tbl_prestamo_interbibliotecario` (`idPrestamo`);

# ---------------------------------------------------------------------- #
# Add table "tbl_libro_temas"                                            #
# ---------------------------------------------------------------------- #

CREATE TABLE `tbl_libro_temas` (
    `idLibroTema` INTEGER(11) NOT NULL AUTO_INCREMENT,
    `idTema` INTEGER(11) NOT NULL,
    `isbn` INTEGER(11),
    PRIMARY KEY (`idLibroTema`)
)
ENGINE = INNODB;

CREATE INDEX `tbl_temas_tbl_libro_temas` ON `tbl_libro_temas` (`idTema`);

CREATE INDEX `tbl_libro_tbl_libro_temas` ON `tbl_libro_temas` (`isbn`);

# ---------------------------------------------------------------------- #
# Add table "tbl_milista"                                                #
# ---------------------------------------------------------------------- #

CREATE TABLE `tbl_milista` (
    `id_miLista` INTEGER(11) NOT NULL AUTO_INCREMENT,
    `id` INTEGER(11) NOT NULL,
    `isbn` INTEGER(11) NOT NULL,
    `nombreLista` VARCHAR(40) CHARACTER SET utf8mb4,
    `categoriaLista` VARCHAR(40) CHARACTER SET utf8mb4,
    PRIMARY KEY (`id_miLista`)
)
ENGINE = INNODB;

CREATE INDEX `tbl_usuario_tbl_usuario_tbl_libro` ON `tbl_milista` (`id`);

CREATE INDEX `tbl_libro_tbl_usuario_tbl_libro` ON `tbl_milista` (`isbn`);

# ---------------------------------------------------------------------- #
# Add foreign key constraints                                            #
# ---------------------------------------------------------------------- #

ALTER TABLE `tbl_libro` ADD CONSTRAINT `Editorial_Libro` 
    FOREIGN KEY (`idEditorial`) REFERENCES `tbl_editorial` (`idEditorial`) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE `tbl_prestamo` ADD CONSTRAINT `TBL_Video_Beam_TBL_Prestamo` 
    FOREIGN KEY (`idVideoBeam`) REFERENCES `tbl_video_beam` (`idVideoBeam`) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE `tbl_prestamo` ADD CONSTRAINT `TBL_Computador_TBL_Prestamo` 
    FOREIGN KEY (`idcomputador`) REFERENCES `tbl_computador` (`idcomputador`) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE `tbl_prestamo` ADD CONSTRAINT `tbl_usuario_tbl_prestamo` 
    FOREIGN KEY (`id`) REFERENCES `tbl_usuario` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE `tbl_prestamo` ADD CONSTRAINT `tbl_libro_tbl_prestamo` 
    FOREIGN KEY (`isbn`) REFERENCES `tbl_libro` (`isbn`) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE `tbl_libro_autor` ADD CONSTRAINT `tbl_autor_tbl_libro_autor` 
    FOREIGN KEY (`idAutor`) REFERENCES `tbl_autor` (`idAutor`) ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE `tbl_libro_autor` ADD CONSTRAINT `tbl_libro_tbl_libro_autor` 
    FOREIGN KEY (`isbn`) REFERENCES `tbl_libro` (`isbn`) ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE `tbl_prestamo_interbibliotecario` ADD CONSTRAINT `tbl_biblioteca_tbl_prestamo_InterBibliotecario` 
    FOREIGN KEY (`idPrestemoInterBibliotecario`) REFERENCES `tbl_biblioteca` (`idBiblioteca`) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE `tbl_prestamo_interbibliotecario` ADD CONSTRAINT `tbl_libro_prestamoint_tbl_prestamo_InterBibliotecario` 
    FOREIGN KEY (`isbnPrestamoInt`) REFERENCES `tbl_libro_prestamoint` (`isbnPrestamoInt`) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE `tbl_prestamo_interbibliotecario` ADD CONSTRAINT `tbl_prestamo_tbl_prestamo_InterBibliotecario` 
    FOREIGN KEY (`idPrestamo`) REFERENCES `tbl_prestamo` (`idPrestamo`) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE `tbl_libro_temas` ADD CONSTRAINT `tbl_temas_tbl_libro_temas` 
    FOREIGN KEY (`idTema`) REFERENCES `tbl_temas` (`idTema`) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE `tbl_libro_temas` ADD CONSTRAINT `tbl_libro_tbl_libro_temas` 
    FOREIGN KEY (`isbn`) REFERENCES `tbl_libro` (`isbn`) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE `tbl_milista` ADD CONSTRAINT `tbl_usuario_tbl_usuario_tbl_libro` 
    FOREIGN KEY (`id`) REFERENCES `tbl_usuario` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE `tbl_milista` ADD CONSTRAINT `tbl_libro_tbl_usuario_tbl_libro` 
    FOREIGN KEY (`isbn`) REFERENCES `tbl_libro` (`isbn`) ON DELETE RESTRICT ON UPDATE RESTRICT;

# ---------------------------------------------------------------------- #
# Add procedures                                                         #
# ---------------------------------------------------------------------- #

DROP PROCEDURE IF EXISTS `login`;
 DELIMITER $$
CREATE PROCEDURE `login` (codigoUsuario INT,    clave varchar (40))
BEGIN
SELECT codigo,nombre ,  perfil FROM tbl_usuario WHERE codigo = codigoUsuario AND contrasena like binary  clave AND (`intentos` < 3 OR (`intentos` > 3 AND NOW() > DATE_ADD(`ultimo_intento`, INTERVAL 15 MINUTE)));
END$$
DELIMITER ;;

DROP PROCEDURE IF EXISTS `intentoExitoso`;
 DELIMITER $$
CREATE PROCEDURE `intentoExitoso` (codigoUsuario INT)
BEGIN
UPDATE `tbl_usuario` SET `ultimo_intento`= NOW() ,`intentos` = 0  WHERE `codigo` =codigoUsuario;
END$$
DELIMITER ;;

DROP PROCEDURE IF EXISTS `intento`;
 DELIMITER $$
CREATE PROCEDURE `intento` (codigoUsuario INT)
BEGIN
UPDATE `tbl_usuario` SET `ultimo_intento`= NOW() ,`intentos` = `intentos`+1  WHERE `codigo` =codigoUsuario;
END$$

DELIMITER ;;

DROP PROCEDURE IF EXISTS `insetUsuario`;
 DELIMITER $$
CREATE  PROCEDURE `insetUsuario` (IN `cedulaUsuario` VARCHAR(40), IN `codigoUsuario` INT, IN `nombreUsuario` VARCHAR(40), IN `apellidoUsuario` VARCHAR(40), IN `fechaNacimientoUsuario` VARCHAR(40), IN `sexoUsuario` INT, IN `direccionUsuario` VARCHAR(40), IN `direccion2Usuario` VARCHAR(40), IN `telefonoPrincipalUsuario` VARCHAR(40), IN `telefonoSecundarioUsuario` VARCHAR(40), IN `telefonoOtroUsuario` VARCHAR(40), IN `emailPrincipalUsuario` VARCHAR(40), IN `contactoNombreUsuario` VARCHAR(40), IN `contactoApellidoUsuario` VARCHAR(40), IN `contactoDireccionUsuario` VARCHAR(40), IN `contactoDireccion2Usuario` VARCHAR(40), IN `contactoTelefonoUsuario` VARCHAR(40), IN `contrasenaUsuario` VARCHAR(40), IN `perfilUsuario` VARCHAR(40)) 
 BEGIN 
 INSERT INTO tbl_usuario (cedula, codigo, nombre, apellido, fechaNacimiento, sexo, direccion, direccion2, telefonoPrincipal, telefonoSecundario, telefonoOtro, emailPrincipal, contactoNombre, contactoApellido, contactoDireccion, contactoDireccion2, contactoTelefono, contrasena, perfil) VALUES (cedulaUsuario,codigoUsuario,nombreUsuario,apellidoUsuario,fechaNacimientoUsuario,sexoUsuario, direccionUsuario,direccion2Usuario, telefonoPrincipalUsuario,telefonoSecundarioUsuario,telefonoOtroUsuario,emailPrincipalUsuario,contactoNombreUsuario,contactoApellidoUsuario, contactoDireccionUsuario,contactoDireccion2Usuario,contactoTelefonoUsuario,contrasenaUsuario, perfilUsuario);  
  END$$

DELIMITER ;;

DROP PROCEDURE IF EXISTS `buscarUsuario`;
 DELIMITER $$

CREATE PROCEDURE `buscarUsuario` (codigoUsuario int)
BEGIN
SELECT  `codigo`, `cedula`, `nombre`, `apellido`, `fechaNacimiento`, `sexo`, `direccion`, `direccion2`, `telefonoPrincipal`, `telefonoSecundario`, `telefonoOtro`, `emailPrincipal`, `contactoNombre`, `contactoApellido`, `contactoDireccion`, `contactoDireccion2`, `contactoTelefono`, `contrasena`,  `perfil`FROM `tbl_usuario` WHERE `codigo`  = codigoUsuario;
END$$

DELIMITER ;;

DROP PROCEDURE IF EXISTS `insertVideoBeam`;
 DELIMITER $$

CREATE PROCEDURE `insertVideoBeam` (idVideoBeam int  ,  fabricante varchar (40)  ,  cableUSB int  ,  cableHDMI int  ,  cableVGA int  ,  observaciones text )
BEGIN
INSERT INTO `tbl_video_beam`(`idVideoBeam`, `fabricante`, `cableUSB`, `cableHDMI`, `cableVGA`, `observaciones`) VALUES (idVideoBeam   ,  fabricante   ,  cableUSB   ,  cableHDMI   ,  cableVGA   ,  observaciones  );
END$$

DELIMITER ;;

DROP PROCEDURE IF EXISTS `eliminarVideoBeam`;
 DELIMITER $$

CREATE PROCEDURE `eliminarVideoBeam` (idVideoBeam int )
BEGIN
DELETE FROM `tbl_video_beam` WHERE `idVideoBeam` = idVideoBeam;
END$$

DELIMITER ;;

DROP PROCEDURE IF EXISTS `buscarVideoBean`;
 DELIMITER $$

CREATE PROCEDURE `buscarVideoBean` (idVideoBeam int )
BEGIN
SELECT * FROM `tbl_video_beam` WHERE `idVideoBeam`=idVideoBeam;
END$$

DELIMITER ;;

DROP PROCEDURE IF EXISTS `verificacionVideoBeam`;
 DELIMITER $$

CREATE PROCEDURE `verificacionVideoBeam` (codigoVideoBeam int)
BEGIN
SELECT idVideoBeam FROM `tbl_video_beam` WHERE `idVideoBeam`=codigoVideoBeam ;
END$$

DELIMITER ;;

DROP PROCEDURE IF EXISTS `insetComputador`;
 DELIMITER $$

CREATE PROCEDURE `insetComputador` (idcomputador int  , fabricante varchar (40), observaciones text , cargadorId int  )
BEGIN
INSERT INTO `tbl_computador` (`idcomputador`, `fabricante`, `observaciones`, `cargadorId`) VALUES (idcomputador, fabricante, observaciones, cargadorId  );    
END$$

DELIMITER ;;

DROP PROCEDURE IF EXISTS `eliminarUsuario`;
 DELIMITER $$
CREATE  PROCEDURE `eliminarUsuario` ( IN codigoUsuario INT) 
 BEGIN
DELETE FROM `tbl_usuario` WHERE `codigo`=codigoUsuario;
  END$$
DELIMITER ;;

DROP PROCEDURE IF EXISTS `correoUsuario`;
 DELIMITER $$
CREATE  PROCEDURE `correoUsuario` ( IN codigoUsuario INT,emailPrincipalUsuario VARCHAR(40)) 
 BEGIN
SELECT `contrasena` FROM `tbl_usuario` WHERE `codigo`= codigoUsuario and `emailPrincipal` =  emailPrincipalUsuario;
  END$$
DELIMITER ;;

DROP PROCEDURE IF EXISTS `multaUsuario`;
 DELIMITER $$
CREATE  PROCEDURE `multaUsuario` ( IN codigoUsuario INT) 
 BEGIN
SELECT  multa FROM `tbl_usuario` WHERE `codigo`= codigoUsuario;
  END$$
DELIMITER ;;

DROP PROCEDURE IF EXISTS `cambioClaveUsuario`;
 DELIMITER $$
CREATE  PROCEDURE `cambioClaveUsuario` ( IN codigoUsuario INT, IN contrasenaUsuario  VARCHAR(40)) 
 BEGIN
UPDATE `tbl_usuario` SET `contrasena`= contrasenaUsuario WHERE `codigo`= codigoUsuario;
  END$$
DELIMITER ;;

DROP PROCEDURE IF EXISTS `verificacionUsuario`;
 DELIMITER $$
CREATE  PROCEDURE `verificacionUsuario` ( IN codigoUsuario INT) 
 BEGIN
SELECT `codigo` FROM `tbl_usuario` WHERE `codigo`= codigoUsuario;
  END$$
DELIMITER ;;

DROP PROCEDURE IF EXISTS `actualizarVideoBeam`;
 DELIMITER $$
CREATE  PROCEDURE `actualizarVideoBeam` ( idVideoBeam int  ,  fabricante varchar (40)  ,  cableUSB int  ,  cableHDMI int  ,  cableVGA int  ,  observaciones text ) 
 BEGIN
UPDATE `tbl_video_beam` SET `fabricante`= fabricante,`cableUSB`= cableUSB ,`cableHDMI`= cableHDMI,`cableVGA`= cableVGA,`observaciones`= observaciones WHERE `idVideoBeam`=  idVideoBeam ;
  END$$
DELIMITER ;;

DROP PROCEDURE IF EXISTS `actualizarComputador`;
 DELIMITER $$

CREATE PROCEDURE `actualizarComputador` (IN `fabricante` VARCHAR(40), IN `observaciones`text ,IN `cargadorId` INT, IN `idcomputador` INT )
BEGIN
UPDATE `tbl_computador` SET `fabricante` = fabricante , `observaciones` = observaciones, `cargadorId` = cargadorId WHERE `tbl_computador`.`idcomputador` = idcomputador ; 
END$$

DELIMITER ;;

DROP PROCEDURE IF EXISTS `eliminarComputador`;
 DELIMITER $$

CREATE PROCEDURE `eliminarComputador` (idcomputador int  )
BEGIN
DELETE FROM `tbl_computador` WHERE `tbl_computador`.`idcomputador` = idcomputador;
END$$

DELIMITER ;;

DROP PROCEDURE IF EXISTS `buscarComputador`;
 DELIMITER $$

CREATE PROCEDURE `buscarComputador` (idcomputador int  )
BEGIN
SELECT `idcomputador`, `fabricante`, `observaciones`, `cargadorId` FROM `tbl_computador` WHERE `idcomputador` = idcomputador ;
END$$

DELIMITER ;;

DROP PROCEDURE IF EXISTS `verificacionComputador`;
 DELIMITER $$

CREATE PROCEDURE `verificacionComputador` (id int)
BEGIN
SELECT `idcomputador` FROM `tbl_computador` WHERE `idcomputador` = id;
END$$

DELIMITER ;;

DROP PROCEDURE IF EXISTS `verificacionTema`;
 DELIMITER $$
CREATE PROCEDURE `verificacionTema` (nombreTema varchar (40))
BEGIN
SELECT `descripcion` FROM `tbl_temas` WHERE `nombreTema` = temaNombre;
END$$
DELIMITER ;;

DROP PROCEDURE IF EXISTS `buscarTema`;
 DELIMITER $$
CREATE PROCEDURE `buscarTema` (nombreTema varchar (40))
BEGIN
SELECT `descripcion` FROM `tbl_temas` WHERE `nombreTema` = temaNombre;
END$$
DELIMITER ;;

DROP PROCEDURE IF EXISTS `eliminarTema`;
 DELIMITER $$
CREATE PROCEDURE `eliminarTema` (nombreTema varchar (40))
BEGIN
DELETE FROM `tbl_temas` WHERE `nombreTema` = temaNombre;
END$$
DELIMITER ;;

DROP PROCEDURE IF EXISTS `actualizarTema`;
 DELIMITER $$
CREATE PROCEDURE `actualizarTema` (temaNombre varchar (40), temadescripcion TEXT)
BEGIN
UPDATE `tbl_temas` SET `descripcion`= temadescripcion WHERE `nombreTema`= temaNombre;
END$$
DELIMITER ;;

DROP PROCEDURE IF EXISTS `insetTema`;
 DELIMITER $$
CREATE PROCEDURE `insetTema` (temaNombre varchar (40), temadescripcion TEXT)
BEGIN
INSERT INTO `tbl_temas`( `nombreTema`, `descripcion`) VALUES (temaNombre,temadescripcion);
END$$
DELIMITER ;;
